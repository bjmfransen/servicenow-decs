<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>global.__DataUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>__DataUtils</name>
        <script><![CDATA[var __DataUtils = Class.create();
__DataUtils.prototype = {
    initialize: function () {},
    /**
     * Retrieves data from a table
     *
     * @param {string} table - the table to query
     * @param {string} query - encoded query string
     * @param {array} fields - fields to be returned
     * @param {number} max - the number of records to be returned, -1 returns all
     * @returns {array} - array with records and name value pairs of the fields (both display and value).
     */
     getRecordList: function (table, query, fields, max) {
		 gs.info('getRecordList')
        var gr = new GlideRecord(table);

        // determine if the getValues function needs to perform dotwalks
        var getValues = getValuesFunction(fields);

        if (fields.indexOf('sys_id') === -1) {
            fields.push('sys_id');
        }
        gr.addQuery(query);
        if (typeof max === 'number' && max > -1) {
            gr.setLimit(max);
        }
		 gs.info(query)
        gr.query();

        var result = [];
        var record;
        while (gr.next()) {
            record = {};
            fields.forEach(function (field) {
                record[field] = getValues(gr, field);
            });
            result.push(record);
        }
        return result;
    },

    // getDataByClass: function (table, query, fields, max) {
    //     /**
    //      * Retrieves data from a table
    //      *
    //      * @param {string} table - the table to query
    //      * @param {string} query - encoded query string
    //      * @param {array} fields - fields to be returned
    //      * @param {number} max - the number of records to be returned, -1 returns all
    //      * @returns {array} - array with records and name value pairs of the fields (both display and value).
    //      */
    //     var gr = new GlideRecord(table);

    //     if (fields.indexOf('sys_id') === -1) {
    //         fields.push('sys_id');
    //     }
    //     gr.addQuery(query);
    //     if (typeof max === 'number' && max > -1) {
    //         gr.setLimit(max);
    //     }
    //     gr.query();

    //     var result = [];
    //     var record;

    //     while (gr.next()) {
    //         var classname = gr.getValue('sys_class_name');
    //         record = {};
    //         fields.forEach(function (field) {
    //             record[field] = {
    //                 value: gr['ref_' + classname][field].getValue(),
    //                 display: gr['ref_' + classname][field].getDisplayValue()
    //             };
    //         });
    //         result.push(record);
    //     }
    //     return result;
    // },

    insertRecord: function (table, values) {
        /**
         * Inserts a record into a table.
         * @param {string} table - name of the table where the record is inserted
         * @param {Object} values = field/value pairs
         * @returns {string} sys_id of the inserted record
         */
        if (typeof table !== 'string') return -1;
        if (typeof values !== 'object') return -2;

        var gr = new GlideRecord(table);
        for (var field in values) {
            gr.setValue(field, values[field]);
        }

        return gr.insert();
    },

    type: 'bjDataUtils'
};

function getValuesFunction(fields){
    // if we do not need to dotwalk, we can use a much more efficient function
    // than if we do. for performance reason we implement both functions and determine
    // runtime which one to use
    var dotwalk = (fields.some(function(field){
        return field.indexOf('.') > -1;
    }));

    return dotwalk ? _getDotWalkValues : _getValues;
}

function _getValues(gr, field) {
    return {
        value: gr.getValue(field),
        display: gr.getDisplayValue(field)
    };
}

function _getDotWalkValues(gr, field) {
    if (typeof field != 'string') return;

    var fields;
    fields = field.split('.');
    do
        gr = gr[fields.shift()];
    while (fields.length > 0);

    return {
        value: gr.getValue(),
        display: gr.getDisplayValue()
    };
}

]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-26 16:03:40</sys_created_on>
        <sys_id>d99a23af2f8a9910f0b8235df699b6ae</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>__DataUtils</sys_name>
        <sys_package display_value="DECS" source="bb52e72f2f869910f0b8235df699b60e">bb52e72f2f869910f0b8235df699b60e</sys_package>
        <sys_policy/>
        <sys_scope display_value="DECS">bb52e72f2f869910f0b8235df699b60e</sys_scope>
        <sys_update_name>sys_script_include_d99a23af2f8a9910f0b8235df699b6ae</sys_update_name>
        <sys_updated_by>falcon</sys_updated_by>
        <sys_updated_on>2022-09-26 16:37:21</sys_updated_on>
    </sys_script_include>
</record_update>
